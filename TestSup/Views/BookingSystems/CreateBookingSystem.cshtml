@model TestSup.Models.BookingSystemsViewModel

@{
    ViewBag.Title = "Skapa ett bokningssystem";
}

<h2>Skapa ett bokningssystem</h2>

@using (Html.BeginForm("CreateBookingSystem", "BookingSystems", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.SystemName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SystemName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SystemName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SystemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SystemDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SystemDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @type = "number", @onkeydown = "return event.keyCode !== 69" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Plats", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Editor("Plats", new { htmlAttributes = new { @class = "form-control", @id = "auto-input", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreateBookingSystemCategory, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CreateBookingSystemCategory, new SelectList(Enum.GetValues(typeof(CreateBookingSystemCategory))), "Välj Kategori", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CreateBookingSystemCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" class="btn btn-info" name="upload" accept=".png,.jpg,.jpeg,.gif,.bmp" required="required" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Skapa" class="btn btn-info" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @id = "address", @style = "visibility: hidden;", @required = "required" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @id = "city", @style = "visibility: hidden;", @required = "required" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", @id = "latitude", @style = "display: none;", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", @id = "longitude", @style = "display: none;", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
}

<script>
    //Function för att få förslag på adresser.
    function initAutocomplete() {
        var options = {
            types: ['address'],
            componentRestrictions: { country: "se" }
        };
        var input = document.getElementById('auto-input');

        autocomplete = new google.maps.places.Autocomplete(input, options);
        autocomplete.addListener('place_changed', fillInAddress);

        //Fyller i de gömda fälten för stad och adress.
        function fillInAddress() {
            var place = document.getElementById('auto-input').value;

            var splitAddress = place.split(",", 1);

            let splitPlaceToCity = place.split(', ');
            let getCity = Math.floor(splitPlaceToCity.length / 2);
            let splitCity = splitPlaceToCity[getCity];

            document.getElementById('address').value = splitAddress;
            document.getElementById('city').value = splitCity;
        }
    }
</script>

<script>
    //Skickar koordinterna till de gömda textfälten "latitude" och "longitude".
    function showResult(result) {
        document.getElementById('latitude').value = result.geometry.location.lat();
        document.getElementById('longitude').value = result.geometry.location.lng();
    }

    //Function för att räkna ut koordinaterna med hjälp av vilken stad och adress användaren skriver i.
    function getLatitudeLongitude(callback, address, city) {
        geocoder = new google.maps.Geocoder();
        if (geocoder) {
            geocoder.geocode({
                'address': address + city
            }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    callback(results[0]);
                }
            });
        }
    }
    var out = document.getElementById('auto-input');
    //När användaren lämnar "stad"-fältet så körs functions ovanför och fälten "latitude" och "longitude" får sina värden.
    out.addEventListener("focusout", function () {
        var address = document.getElementById('auto-input').value;
        getLatitudeLongitude(showResult, address)
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
