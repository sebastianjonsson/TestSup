@model TestSup.Models.BookingViewModel

@{
    ViewBag.Title = "Create";
}

<!DOCTYPE html>
<meta charset="utf-8" />
<link href="/Content/Site.css" rel="stylesheet" />

<h2>Boka</h2>

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "userName" } })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "email" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UserMobile, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserMobile, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "userMobile" } })
            @Html.ValidationMessageFor(model => model.UserMobile, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "subject" } })
            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @type = "date", @Value = @DateTime.Now.ToShortDateString(), @required = "required", @id = "date", @onclick = "hideTimePicker()" } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            <br />
            <input type="button" value="Visa lediga tider detta datum" class="btn btn-info" onclick="checkDate()" />
        </div>
    </div>

    <div class="form-group" style="display: none;" id="timePicker">
        @Html.Label("Välj tid", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select onclick="getTime()" class="form-control" id="cbTime">
                <option selected disabled> Välj tid</option>
                <option type="button" class="time" id="time8" value="08.00 - 09.00"> 08.00 - 09.00 </option>
                <option type="button" class="time" id="time9" value="09.00 - 10.00"> 09.00 - 10.00 </option>
                <option type="button" class="time" id="time10" value="10.00 - 11.00"> 10.00 - 11.00 </option>
                <option type="button" class="time" id="time11" value="11.00 - 12.00"> 11.00 - 12.00 </option>
                <option type="button" class="time" id="time12" value="12.00 - 13.00"> 12.00 - 13.00 </option>
                <option type="button" class="time" id="time13" value="13.00 - 14.00"> 13.00 - 14.00 </option>
                <option type="button" class="time" id="time14" value="14.00 - 15.00"> 14.00 - 15.00 </option>
                <option type="button" class="time" id="time15" value="15.00 - 16.00"> 15.00 - 16.00 </option>
            </select>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "startTime" } })
            @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Endtime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Endtime, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "endTime" } })
            @Html.ValidationMessageFor(model => model.Endtime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" value="Boka" class="btn btn-info" onclick="getBookings()" />
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input href="javascript:void(0);" onclick="history.go(-1);" type="button" value="Tillbaka till verksamheten" class="btn btn-primary btn-sm" />
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" data-keyboard="false" data-backdrop="static" id="modal-badboy">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"> Rekommenderade!</h5>
            </div>
            <div class="modal-body">
                <p>Din bokning är nu genomförd och om du är intresserad kommer här några tips:</p>
                @{
                    ViewBag.Title = "CreateBooking";
                    var id = ViewBag.ID;
                }
                <h3>Rekommenderade:</h3>
                @Html.Partial("../BookingSystems/RecommendedBookingSystem", new TestSup.Controllers.RecommendedBookingSystem(id))
            </div>
            <div class="modal-footer">
                <button onclick="location.href= '@Url.Action("BookingList", "Booking")'" class="btn btn-primary btn-sm"> Inte intresserad </button>
            </div>
        </div>
    </div>
</div>

<script>
    function hideTimePicker() {
        var hiddenButton = document.getElementById("timePicker");
        hiddenButton.style.display = "none";
    }

    function showTimePicker() {
        var hiddenButton = document.getElementById("timePicker");
        hiddenButton.style.display = "block";

    }
</script>

<script>
    function checkDate() {
        var showTime8 = document.getElementById("time8");
        var showTime9 = document.getElementById("time9");
        var showTime10 = document.getElementById("time10");
        var showTime11 = document.getElementById("time11");
        var showTime12 = document.getElementById("time12");
        var showTime13 = document.getElementById("time13");
        var showTime14 = document.getElementById("time14");
        var showTime15 = document.getElementById("time15");

        var date = $('#date').val();
        var id = '@ViewBag.ID';
        $.ajax({
            url: "http://localhost:64034/api/getAllTimesDate?date=" + date + "&id=" + id,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                data.forEach(function (data) {
                    var jsonTime = JSON.stringify(data.StartTime);

                    if (jsonTime.replace(/['"]+/g, '') == "08.00") {
                        showTime8.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "09.00") {
                        showTime9.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "10.00") {
                        showTime10.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "11.00") {
                        showTime11.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "12.00") {
                        showTime12.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "13.00") {
                        showTime13.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "14.00") {
                        showTime14.style.display = "none";
                    }
                    if (jsonTime.replace(/['"]+/g, '') == "15.00") {
                        showTime15.style.display = "none";
                    }
                    showTimePicker();
                    if (jsonTime == "[]") {
                        showTimePicker();
                    }
                });
            },
        });
    }
</script>

<script>
    function getTime() {
        var timeText = document.getElementById("cbTime").value;
        var getStartTime = timeText.slice(0, 5);
        var getEndTime = timeText.slice(8, 13);
        document.getElementById("startTime").value = getStartTime;
        document.getElementById("endTime").value = getEndTime;
    }
</script>

<script>
    function getBookings() {
        var startTime = $('#startTime').val();
        var id = '@ViewBag.ID';
        var date = $('#date').val();
        $.ajax({
            url: "http://localhost:64034/api/getAllCreateBookings?startTime=" + startTime + "&id=" + id + "&date=" + date,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                var json = JSON.stringify(data);
                if (json == "[]") {
                    book();
                }
                else {
                    alert("BOKNINGEN FINNS FÖRFAN REDAN!!!");
                }
            },
        });
    }
</script>

<script type="text/javascript">

    function book() {

        var userName = $('#userName').val().length;
        var email = $('#email').val().length;
        var userMobile = $('#userMobile').val().length;
        var subject = $('#subject').val().length;
        var startTime = $('#startTime').val().length;
        var endTime = $('#endTime').val().length;

        if (userName > 0 && email > 0 && userMobile > 0 && subject > 0 && startTime > 0 && endTime > 0) {

            var userName = $('#userName').val();
            var email = $('#email').val();
            var userMobile = $('#userMobile').val();
            var subject = $('#subject').val();
            var startTime = $('#startTime').val();
            var endTime = $('#endTime').val();
            var date = $('#date').val();
            var id = '@ViewBag.ID';
            var booking = {
                UserName: userName,
                Email: email,
                UserMobile: userMobile,
                Subject: subject,
                StartTime: startTime,
                EndTime: endTime,
                BookingSystem: id,
                Date: date
            };
            $.ajax({
                type: 'POST',
                url: "http://localhost:64034/api/addBooking/",
                contentType: 'application/json',
                data: JSON.stringify(booking),
                success: function (result) {
                    $('#modal-badboy').modal('show');
                }
            });
        }
        else {
            alert("Du måste fylla i alla fält!")
        }
    }
</script>



