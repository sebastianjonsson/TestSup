@model Logic.Bookings

@{
    ViewBag.Title = "Ändra bokning";
}

<h2>Ändra bokning</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2", @onclick = "hide()" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @required = "required", @onclick = "hide()", @id = "userName" } })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @required = "required", @onclick = "hide()", @id = "email" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UserMobile, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserMobile, new { htmlAttributes = new { @class = "form-control", @required = "required", @onclick = "hide()", @id = "userMobile", @type = "number", @onkeydown = "return event.keyCode !== 69" } })
            @Html.ValidationMessageFor(model => model.UserMobile, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control", @required = "required", @onclick = "hide()" } })
            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @type = "date", @Value = Model.Date.ToShortDateString(), @required = "required", @onclick = "hide(), hideTimePicker()", @id = "date", @min = @DateTime.Now.ToShortDateString() } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            <br />
            <input type="button" value="Visa lediga tider detta datum" class="btn btn-info" onclick="checkDate()" />
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <label>Tidigare starttid: @Model.StartTime</label>
            @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "startTime", @style = "display: none;" } })
            @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Endtime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <label>Tidigare sluttid: @Model.Endtime</label>
            @Html.EditorFor(model => model.Endtime, new { htmlAttributes = new { @class = "form-control", @required = "required", @id = "endTime", @style = "display: none;" } })
            @Html.ValidationMessageFor(model => model.Endtime, "", new { @class = "text-danger" })
        </div>
    </div>

    @*Options för tider man kan boka.*@
    <div class="form-group" style="display: none;" id="timePicker">
        @Html.Label("Välj tid", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select onclick="getTime(), hide()" class="form-control" id="cbTime">
                <option selected disabled> Välj tid</option>
                <option type="button" class="time" id="time8" value="08:00 - 09:00"> 08.00 - 09.00 </option>
                <option type="button" class="time" id="time9" value="09:00 - 10:00"> 09.00 - 10.00 </option>
                <option type="button" class="time" id="time10" value="10:00 - 11:00"> 10.00 - 11.00 </option>
                <option type="button" class="time" id="time11" value="11:00 - 12:00"> 11.00 - 12.00 </option>
                <option type="button" class="time" id="time12" value="12:00 - 13:00"> 12.00 - 13.00 </option>
                <option type="button" class="time" id="time13" value="13:00 - 14:00"> 13.00 - 14.00 </option>
                <option type="button" class="time" id="time14" value="14:00 - 15:00"> 14.00 - 15.00 </option>
                <option type="button" class="time" id="time15" value="15:00 - 16:00"> 15.00 - 16.00 </option>
            </select>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" id="updateBtn" value="Uppdatera" class="btn btn-info" onclick="getBookings()" />
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="hidden" value="Spara de nya ändringarna" class="btn btn-info" style="display: none;" />
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="button" onclick="location.href= '@Url.Action("BookingList", "Booking")'" class="btn btn-primary btn-sm"> Tillbaka till alla bokningar </button>
        </div>
    </div>
</div>
}

<script>
    //Funktion för att dela på starttid och sluttid från optionlistan och sätter det värdet på de gömda fälten för slut- och starttid.
    function getTime() {
        var timeText = document.getElementById("cbTime").value;
        var getStartTime = timeText.slice(0, 5);
        var getEndTime = timeText.slice(8, 13);
        document.getElementById("startTime").value = getStartTime;
        document.getElementById("endTime").value = getEndTime;
    }
</script>

<script>
    //Visar "spara"-knappen när man klickar på "uppdatera"-knappen
    function update() {
        //Validering
        var userName = $('#userName').val().length;
        var userMobile = $('#userMobile').val().length;
        var emailValidate = $('#email').val();
        var emailRegex = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;

        if (userName < 4 || userName > 30) {
            alert("Namnet måste vara minst 4 tecken och max 30 tecken.");
            return;
        }

        if (!emailRegex.test(emailValidate)) {
            alert("Skriv en korrekt email.");
            return;
        }

        if (userMobile != 10) {
            alert("Telefonnumret måste vara 10 siffror.");
            return;
        }

        //Visar knappen för att spara
        var hiddenButton = document.getElementById("hidden");
        hiddenButton.style.display = "block";
    }

    //Gömmer "spara"-knappen om man klickar på nåt fält att ändra.
    function hide() {
        var hiddenButton = document.getElementById("hidden");
        hiddenButton.style.display = "none";
    }
</script>

<script>
    //Gömmer timepicker om mn byter dag.
    function hideTimePicker() {
        var hiddenButton = document.getElementById("timePicker");
        hiddenButton.style.display = "none";
    }
    //Visar timepicker när man vill se tider för den dagen.
    function showTimePicker() {
        var hiddenButton = document.getElementById("timePicker");
        hiddenButton.style.display = "block";

    }
</script>

<script>
    //Funktion för att visa de tider i timepickern som inte redan varit den dagen man väljer och som inte redan är 
    //bokade för den dagen.
    function checkDate() {

        var resetCbTime = document.getElementById("cbTime");

        var getStartTime8 = "08:00";
        var showTime8 = document.getElementById("time8");
        
        var getStartTime9 = "09:00";
        var showTime9 = document.getElementById("time9");
        
        var getStartTime10 = "10:00";
        var showTime10 = document.getElementById("time10");
        
        var getStartTime11 = "11:00";
        var showTime11 = document.getElementById("time11");
        
        var getStartTime12 = "12:00";
        var showTime12 = document.getElementById("time12");
        
        var getStartTime13 = "13:00";
        var showTime13 = document.getElementById("time13");
        
        var getStartTime14 = "14:00";
        var showTime14 = document.getElementById("time14");
        
        var getStartTime15 = "15:00";
        var showTime15 = document.getElementById("time15");

        var date = $('#date').val();
        var id = @Model.BookingSystem.Id;
        var todayTime = '@DateTime.Now.ToShortTimeString()';
        var todayDate = '@DateTime.Now.ToShortDateString()';
        //Ajax som hämtar de bokningar som redan är bokade den dagen hos bokningssystemet.
        $.ajax({
            url: "http://localhost:64034/api/getAllTimesDate?date=" + date + "&id=" + id,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                var jsonData = JSON.stringify(data);
                //Om det inte finns några bokade den dagen så visas alla tider som inte redan har varit den dagen.
                if (jsonData == "[]") {
                    showTime8.style.display = "block";
                    showTime9.style.display = "block";
                    showTime10.style.display = "block";
                    showTime11.style.display = "block";
                    showTime12.style.display = "block";
                    showTime13.style.display = "block";
                    showTime14.style.display = "block";
                    showTime15.style.display = "block";
                    if (getStartTime8 < todayTime && todayDate == date) {
                        showTime8.style.display = "none";
                    }
                    if (getStartTime9 < todayTime  && todayDate == date) {
                        showTime9.style.display = "none";
                    }
                    if (getStartTime10 < todayTime  && todayDate == date) {
                        showTime10.style.display = "none";
                    }
                    if (getStartTime11 < todayTime  && todayDate == date) {
                        showTime11.style.display = "none";
                    }
                    if (getStartTime12 < todayTime  && todayDate == date) {
                        showTime12.style.display = "none";
                    }
                    if (getStartTime13 < todayTime  && todayDate == date) {
                        showTime13.style.display = "none";
                    }
                    if (getStartTime14 < todayTime  && todayDate == date) {
                        showTime14.style.display = "none";
                    }
                    if (getStartTime15 < todayTime  && todayDate == date) {
                        showTime15.style.display = "none";
                    }
                    //Visar timepickern med de tiderna som är lediga.
                    showTimePicker();
                    //Visar "Välj tid" om man byter dag.
                    resetCbTime.selectedIndex = 0;
                }
                //Om det finns bokningar den dagen så visas bara de tider som inte är bokade och som inte redan varit den dagen.
                else {
                    showTime8.style.display = "block";
                    showTime9.style.display = "block";
                    showTime10.style.display = "block";
                    showTime11.style.display = "block";
                    showTime12.style.display = "block";
                    showTime13.style.display = "block";
                    showTime14.style.display = "block";
                    showTime15.style.display = "block";
                        data.forEach(function (data) {
                            var jsonTime = data.StartTime;
                            if (jsonTime == getStartTime8 || getStartTime8 < todayTime && todayDate == date) {
                                showTime8.style.display = "none";
                            }
                            if (jsonTime == getStartTime9 || getStartTime9 < todayTime && todayDate == date) {
                                showTime9.style.display = "none";
                            }
                            if (jsonTime == getStartTime10 || getStartTime10 < todayTime && todayDate == date) {
                                showTime10.style.display = "none";
                            }
                            if (jsonTime == getStartTime11 || getStartTime11 < todayTime && todayDate == date) {
                                showTime11.style.display = "none";
                            }
                            if (jsonTime == getStartTime12 || getStartTime12 < todayTime && todayDate == date) {
                                showTime12.style.display = "none";
                            }
                            if (jsonTime == getStartTime13 || getStartTime13 < todayTime && todayDate == date) {
                                showTime13.style.display = "none";
                            }
                            if (jsonTime == getStartTime14 || getStartTime14 < todayTime && todayDate == date) {
                                showTime14.style.display = "none";
                            }
                            if (jsonTime == getStartTime15 || getStartTime15 < todayTime && todayDate == date) {
                                showTime15.style.display = "none";
                            }
                            //Visar timepickern med de tiderna som är lediga.
                            showTimePicker();
                            //Visar "Välj tid" om man byter dag.
                            resetCbTime.selectedIndex = 0;
                    });
                }
            },
        });
    }
</script>

<script>
    //Denna funktion hämtar alla bokningar som är gjorde hos bokningssystemet samma tid och samma dag som man väljer.
    //Om man t.ex. har två fönster öppna samtidigt och försöker boka samma tid så körs elsen i denna metod.
    function getBookings() {
        var startTime = $('#startTime').val();
        var id = @Model.BookingSystem.Id;
        var date = $('#date').val();
        $.ajax({
            url: "http://localhost:64034/api/getAllCreateBookings?startTime=" + startTime + "&id=" + id + "&date=" + date,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                var json = JSON.stringify(data);
                if (json == "[]") {
                    update();
                }
                else {
                    alert("Denna tid är tyvärr redan bokad.");
                }
            },
        });
    }
</script>
